# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

#include:
  #- ../../../../docker_image_build/GenAIComps/comps/struct2graph/deployment/docker_compose/struct2graph-compose.yaml
  #- ../../../../docker_image_build/GenAIComps/comps/text2cypher/deployment/docker_compose/compose.yaml
    #- ../../../../docker_image_build/GenAIComps/comps/third_parties/tgi/deployment/docker_compose/compose.yaml
    #- ../../../../docker_image_build/GenAIComps/comps/third_parties/tei/deployment/docker_compose/compose.yaml
    #- ../../../../docker_image_build/GenAIComps/comps/third_parties/milvus/deployment/docker_compose/compose.yaml
    #- ../../../../docker_image_build/GenAIComps/comps/third_parties/neo4j/deployment/docker_compose/compose.yaml

services:
  hybridrag:
    image: ${REGISTRY:-opea}/hybridrag:${TAG:-latest}
    container_name: hybridrag-server
    ports:
      - ${STRUCT2GRAPH_PORT:-8090}:8090
      - ${TEXT2CYPHER_PORT:-9097}:9097
    environment:
      no_proxy: ${no_proxy}
      https_proxy: ${https_proxy}
      http_proxy: ${http_proxy}
      NEO4J_URL: ${NEO4J_URL}
      NEO4J_server_directories_import: import
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_allow__csv__import__from__file__urls: "true"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      HUGGINGFACEHUB_API_TOKEN: ${HF_TOKEN}
    depends_on:
      neo4j-apoc:
        condition: service_healthy
      struct2graph:
        condition: service_started
      text2cypher:
        condition: service_started
      tei-embedding-serving:
        condition: service_healthy
      vllm-service:
        condition: service_healthy
      dataprep-milvus-service:
        condition: service_healthy
##    healthcheck:
##      test: ["CMD", "curl", "-f", "http://localhost:${STRUCT2GRAPH_PORT:-8090}"]
##      interval: 10s
##      timeout: 5s
##      retries: 10
##      start_period: 30s
    restart: always

  dataprep-milvus-service:
    image: ${REGISTRY:-opea}/dataprep:${TAG:-latest}
    container_name: dataprep-milvus-server
    ports:
      - "${DATAPREP_PORT:-11101}:5000"
    ipc: host
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      DATAPREP_COMPONENT_NAME: "OPEA_DATAPREP_MILVUS"
      MILVUS_HOST: ${host_ip}
      MILVUS_PORT: 19530
      TEI_EMBEDDING_ENDPOINT: http://tei-embedding-service:80
      HUGGINGFACEHUB_API_TOKEN: ${HUGGINGFACEHUB_API_TOKEN}
      EMBEDDING_MODEL_ID: ${EMBEDDING_MODEL_ID}
      LOGFLAG: ${LOGFLAG}
    restart: unless-stopped
    depends_on:
      milvus-standalone:
        condition: service_healthy
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy

  text2cypher:
    image: ${REGISTRY:-opea}/text2cypher:${TAG:-latest}
    container_name: text2cypher
    ports:
      - "${TEXT2CYPHER_PORT:-9090}:9090"

  struct2graph:
    image: ${REGISTRY:-opea}/struct2graph:${TAG:-latest}
    container_name: struct2graph
    ports:
      - "${STRUCT2GRAPH_PORT:-8090}:8090"

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "${MINIO_PORT1:-5044}:9001"
      - "${MINIO_PORT2:-5043}:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.6
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "${MILVUS_STANDALONE_PORT:-9091}:9091"
    depends_on:
      - "etcd"
      - "minio"        

  neo4j-apoc:
    image: neo4j:latest
    container_name: neo4j-apoc
    ports:
      - "${NEO4J_PORT1:-7474}:7474"
      - "${NEO4J_PORT2:-7687}:7687"
    volumes:
        - ./data/neo4j/logs:/logs
        - ./data/neo4j/config:/config
        - ./data/neo4j/data:/data
        - ./data/neo4j/plugins:/plugins
    ipc: host
    environment:
      - no_proxy=${no_proxy}
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.\*
      - NEO4J_server_bolt_advertised__address=localhost:${NEO4J_PORT2}
    restart: always
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 3s        
  tei-embedding-serving:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.6
    container_name: tei-embedding-serving
    entrypoint: /bin/sh -c "apt-get update && apt-get install -y curl && text-embeddings-router --json-output --model-id ${EMBEDDING_MODEL_ID} --auto-truncate"
    ports:
      - "${TEI_EMBEDDER_PORT:-12000}:80"
    volumes:
      - "${MODEL_CACHE:-./data}:/data"
    shm_size: 1g
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      host_ip: ${host_ip}
      HF_TOKEN: ${HF_TOKEN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${host_ip}:${TEI_EMBEDDER_PORT}/health"]
      interval: 10s
      timeout: 6s
      retries: 48        

  vllm-service:
    image: ${REGISTRY:-opea}/vllm:${TAG:-latest}
    container_name: vllm-service
    ports:
      - "9009:80"
    volumes:
      - "${MODEL_CACHE:-./data}:/root/.cache/huggingface/hub"
    shm_size: 128g
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      HF_TOKEN: ${HUGGINGFACEHUB_API_TOKEN}
      LLM_MODEL_ID: ${LLM_MODEL_ID}
      VLLM_TORCH_PROFILER_DIR: "/mnt"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://$host_ip:9009/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 100
    command: --model $LLM_MODEL_ID --host 0.0.0.0 --port 80        
